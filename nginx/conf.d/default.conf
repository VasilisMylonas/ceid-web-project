# Enable gzip compression for JSON responses
gzip on;
gzip_types application/json text/json;
gzip_min_length 256;
gzip_comp_level 5;

upstream backend {
    # Node.js backend service
    server theseus:3000;
}

# server {
#     listen 80;
#     server_name localhost;
#     http2 on;
# Redirect all HTTP requests to HTTPS
# return 301 https://$host$request_uri;
# }

server {
    listen 80;
    server_name localhost;
    http2 on;

    # SSL configuration for HTTPS <https://nginx.org/en/docs/http/configuring_https_servers.html>s
    # NOT USED
    # listen 443 ssl;
    # server_name localhost;
    # http2 on;
    # ssl_certificate /etc/ssl/certs/localhost.crt;
    # ssl_certificate_key /etc/ssl/private/localhost.key;
    # ssl_protocols TLSv1.2 TLSv1.3;
    # ssl_ciphers HIGH:!aNULL:!MD5;
    # ssl_prefer_server_ciphers on;

    # Don't guess the MIME type
    add_header X-Content-Type-Options "nosniff";

    location = /favicon.ico {
        root /usr/share/nginx/html;
        try_files $uri =404;
        expires 30d;
        add_header Cache-Control "public, must-revalidate";
    }

    location ~ ^/(images|css|js|icons|fonts)/ {
        # Serve static assets directly
        root /usr/share/nginx/html;
        try_files $uri =404;

        # 30 day TTL and allow shared caching
        expires 30d;
        add_header Cache-Control "public, must-revalidate";
    }


    location /api/v1/auth/ {
        proxy_pass http://backend;
        proxy_set_header Host $host;

        # Add client connection details
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;

        # Disable caching for auth responses
        add_header Cache-Control "no-store";
        add_header Pragma "no-cache";
    }

    location /api/ {
        proxy_pass http://backend;
        proxy_set_header Host $host;

        # Add client connection details
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;

        # Allow short browser caching.
        expires 30s;
        add_header Cache-Control "private, must-revalidate";
        add_header Vary "Authorization, Cookie";
    }

    location / {
        # Proxy / requests to the backend
        proxy_pass http://backend;
        proxy_set_header Host $host;

        # Add client connection details
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;

        # Allow short browser caching.
        expires 30s;
        add_header Cache-Control "private, must-revalidate";
        add_header Vary "Authorization, Cookie";
    }
}
